import Head from 'next/head'
import {
  Heading,
  Center,
  Flex,
  Button,
  Stack,
  HStack,
  VStack,
  Text,
  Input,
  Box,
  Image,
  Switch,
  IconButton,
  useColorModeValue,
  useBreakpointValue,
  useToast,
  Container,
  useDisclosure,
  AlertDialog,
  AlertDialogBody,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogContent,
  AlertDialogOverlay,
  Checkbox,
} from "@chakra-ui/react";
import {
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalCloseButton,
  ModalFooter,
  cancelRef
} from "@chakra-ui/react";
import {
  FormControl,
  FormLabel,
  Select,
  InputGroup,
  InputLeftAddon
} from '@chakra-ui/react';
import { Avatar } from '@chakra-ui/react'
import React, { useEffect, useState, useContext } from "react";
import { TextareaAutosizeProps } from 'react-textarea-autosize';
import { Card, CardHeader, CardBody, CardFooter } from '@chakra-ui/react'
import { Textarea, Divider, Header } from '@chakra-ui/react';
import Router from "next/router";
import { db, storage } from "../firebase";
import { ref, uploadBytes, getDownloadURL, getStorage } from 'firebase/storage';
import { useAuth } from "../firebase";
import { AttachmentIcon, DeleteIcon } from '@chakra-ui/icons';
import { addDoc, collection, doc, getDocs, onSnapshot, serverTimestamp, setDoc } from 'firebase/firestore';
import TopDrawer from '../constanst/components/drawer';
import removeUser from '../constanst/services/users/remove_user';
import removeData, { makeid } from '../constanst/services/generic';



export default function Dashboard() {
  const [Users, setUsers] = useState([]);
  const cancelRef = React.useRef();
  const [id, setId] = useState("")
  const { isOpen, onOpen, onClose } = useDisclosure();
  const toast = useToast();
  const { //modal for registration
    isOpen: isOpenAlertModal,
    onOpen: onOpenAlertModal,
    onClose: onCloseAlertModal,
  } = useDisclosure();
  const { //modal for terms and condition
    isOpen: isOpenCheckModal,
    onOpen: onOpenCheckModal,
    onClose: onCloseCheckModal,
  } = useDisclosure();


  const [user, setUser] = useState({
    email: "",
    first_name: "",
    last_name: "",
    gender: "",
    birthday: "",
    age: "",
    address: "",
    mobile_number: "",
    password: "",
  })


  useEffect(
    () =>
      onSnapshot(collection(db, "users"), (snapshot) => {
        setUsers(snapshot.docs.map(doc => ({ ...doc.data(), id: doc.id })))
      }
      ),
    []
  );

  async function register() {
    const user_id = makeid(7)
    const docRef = doc(db, "users", user_id)
    await setDoc(docRef, { ...user, id: user_id, role: "customer" })
    toast({
      title: "Register Successfully", //register banner chuchu
      description: "Please Login...",
      status: "success",
      duration: 2500,
      isClosable: true,
      position: "bottom-right",
    });
    Router.reload(window.location.pathname);
  }

  const processRemoveUser = async (props) => {
    const removeUserAccount = await removeData({ path: "users", id: props });

    if (removeUserAccount.success) {
      toast({
        title: "User Removed Successfully",
        description: removeUserAccount.message,
        status: "success",
        duration: 5000,
        isClosable: true,
      });
      onCloseAlertModal();
    } else {
      toast({
        title: "User Operation Failed",
        description: removeUserAccount.message,
        status: "error",
        duration: 5000,
        isClosable: true,
      });
      onCloseAlertModal();
    }
  };

  return (
    <>

      <Head>
        <title>Profile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/aexelogo.png" />
      </Head>

      <Box as="section" pb={{ base: '12', md: '24' }} bg="#ffffff" maxW="100vw" minH="100vh">
        <TopDrawer />
        <VStack>
          <HStack justifyContent="space-between" w="70vw" mt="2%" px="2">
            <Heading  >Users</Heading>
            <Button onClick={onOpen} w="10vw" bg="#97392F" colorScheme='cyan' color="white">Craete Account</Button>
          </HStack>
          <Card
            mt="2%"
            size="lg"
            align='center'
            variant="outline"
            shadow="base"
            width="70vw"
            outlineColor="gray.900">

            <CardBody>
              {Users === undefined ? (<> </>)
                : (Users.map((data) => {

                  return (
                    <>
                      <HStack width='container.xl' bg='#f2f2f2' height='8vh' justifyContent="space-between" padding="1vw" borderRadius="md">
                        <HStack spacing={5}>
                          <Avatar src={data?.profile_url} size="md" bg='teal.500'> </Avatar>
                          <Heading as='h5' size='sm'>
                            {data.first_name} {data.last_name}
                          </Heading>
                        </HStack>
                        <IconButton
                          onClick={() => {
                            setId(data.id)
                            onOpenAlertModal();
                          }}
                          icon={<DeleteIcon w={8} h={8}></DeleteIcon>}></IconButton>

                        <AlertDialog
                          isOpen={isOpenAlertModal}
                          leastDestructiveRef={cancelRef}
                          onClose={onCloseAlertModal}
                        >
                          <AlertDialogOverlay>
                            <AlertDialogContent>
                              <AlertDialogHeader
                                fontSize="lg"
                                fontWeight="bold"
                              >
                                Delete Customer
                              </AlertDialogHeader>

                              <AlertDialogBody>
                                {
                                  "Are you sure? You can't undo this action afterwards."
                                }
                              </AlertDialogBody>

                              <AlertDialogFooter>
                                <Button
                                  ref={cancelRef}
                                  onClick={onCloseAlertModal}
                                >
                                  Cancel
                                </Button>
                                <Button
                                  backgroundColor={"#F56565"}
                                  _hover={{ backgroundColor: "#FC8181" }}
                                  onClick={() => processRemoveUser(id)}
                                  ml={3}
                                >
                                  Delete
                                </Button>
                              </AlertDialogFooter>
                            </AlertDialogContent>
                          </AlertDialogOverlay>
                        </AlertDialog>
                      </HStack>
                      <Divider mt="1%" color="black" />

                    </>
                  )
                }))}
            </CardBody>
          </Card>
        </VStack>
      </Box>



      <Modal closeOnOverlayClick={false} isOpen={isOpen} onClose={onClose} size='xl'>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader
            align='Center'  //MODAL NUMBER 1 FOR REGISTRATION
            fontSize='25px'>Create your account</ModalHeader>
          <ModalCloseButton />

          <ModalBody>
            <Box borderwidth="4px" borderRadius="lg" p={4} align="center" mt={4}>

              <FormControl isRequired>
                <FormLabel>First Name</FormLabel>
                <Input placeholder='First Name'
                  onChange={(e) => setUser({ ...user, first_name: e.target.value })} />
              </FormControl>

              <FormControl isRequired>
                <FormLabel>Last Name</FormLabel>
                <Input placeholder='Last Name'
                  onChange={(e) => setUser({ ...user, last_name: e.target.value })} />
              </FormControl>

              <FormControl isRequired>
                <FormLabel spacing={3}>Gender</FormLabel>
                <Select placeholder='Select Gender'
                  onChange={(e) => setUser({ ...user, gender: e.target.value })}>
                  <option>Female</option>
                  <option>Male</option>
                </Select>
              </FormControl>

              <FormControl isRequired>
                <HStack spacing={3} paddingTop='3'>
                  <FormLabel>Birthdate</FormLabel>
                  <Input
                    placeholder="Select Date and Time"
                    size="md"
                    type="date"
                    onChange={(e) => setUser({ ...user, birthday: e.target.value })} />
                  <FormLabel>Age</FormLabel>
                  <Input placeholder='Age'
                    type='number'
                    onChange={(e) => setUser({ ...user, age: e.target.value })} />
                </HStack>
              </FormControl>

              <FormControl isRequired>
                <FormLabel>Email</FormLabel>
                <Input placeholder={"Email/Username"}
                  onChange={(e) => setUser({ ...user, email: e.target.value })} />
              </FormControl>

              <FormControl isRequired>
                <FormLabel marginTop={3}>Password</FormLabel>
                <InputGroup size='md'>
                  <Input
                    pr='4.5rem'
                    type={'password'}
                    placeholder='Enter password'
                    onChange={(e) => setUser({ ...user, password: e.target.value })} />
                </InputGroup>
              </FormControl>

              <FormControl isRequired>
                <FormLabel marginTop={3}>Address</FormLabel>
                <Input placeholder='Address'
                  onChange={(e) => setUser({ ...user, address: e.target.value })} />
              </FormControl>

              <FormControl isRequired>
                <FormLabel marginTop={3}>Phone Number</FormLabel>
                <InputGroup>
                  <InputLeftAddon children="+63" />
                  <Input type="phone" roundedLeft="0" placeholder="phone number"
                    onChange={(e) => setUser({ ...user, mobile_number: e.target.value })} />
                </InputGroup>
              </FormControl>

              <Center>
                <Checkbox paddingTop="3" alignContent="center" > I agree to the
                  <Button colorScheme='blackAlpha' variant='link' marginLeft={1}
                    onClick={onOpenCheckModal}
                  >Terms and Condition</Button>
                </Checkbox>
              </Center>

            </Box>
          </ModalBody>

          <ModalFooter>
            <HStack direction='row' spacing={4}>
              <Button colorScheme='red' //FOR THE BUTTON OF REGISTRATION 
                width={"7vw"}
                alignSelf={"flex-start"}
                type="submit"
                isDisabled={
                  user.email === "" || user.first_name === "" ||
                    user.last_name === "" || user.gender === "" ||
                    user.birthday === "" || user.age === "" || user.address === "" ||
                    user.mobile_number === "" || user.password === "" ? true : false}
                onClick={() => { register(); onClose() }}>
                Sign Up</Button>
              <Button colorScheme='red'
                width={"7vw"}
                alignSelf={"flex-end"}
                gap='4'
                onClick={onOpenAlertModal}>
                Cancel</Button>
            </HStack>
          </ModalFooter>
        </ModalContent>
      </Modal>


      <Modal isOpen={isOpenCheckModal} onClose={onCloseCheckModal} size="xl">
        <ModalOverlay />
        <ModalContent>
          <ModalCloseButton />
          <ModalHeader //MODAL NUMBER 2 FOR TERMS AND CONDITION
            textAlign="center" >Terms and Condition & Privacy Policy</ModalHeader>
          <ModalBody>
            <Text as='b'> Privacy Policy </Text>
            <Text marginTop={2} spacing={3} textAlign="justify" lineHeight={6}>
              Methods of Research Aexe: An Augmented Reality Instructor Mobile Application
              On A Vigorous Lifestyle For Zamora Fitness Drive and Wellness Center
              built as a free application for Zamora Fitness Drive and Wellness Center customers.</Text>
            <Text marginTop={2} spacing={3} textAlign="justify" lineHeight={6}>
              This page is to inform visitors about the policies for collecting, using, and
              disclosing Personal Information if they choose to use Aexe application.
              If the user uses this application Aexe, then the user agrees to the collection
              and use of data in accordance with this policy. The application collects
              Personal Information in order to provide and improve the Service.
              Except as specified in this Privacy Policy, the application does not use or share
              the users information with anyone else. Unless otherwise defined in this Privacy Policy,
              the terminology used in this Privacy Policy have the same meaning as in our Terms and Conditions,
              which are available at Aexe.</Text>
          </ModalBody>
          <ModalFooter>
            <Button colorScheme='red' mr={3} onClick={() => { onCloseCheckModal() }}>
              I Agree
            </Button>
          </ModalFooter>
        </ModalContent>
      </Modal>
    </>
  )
}
