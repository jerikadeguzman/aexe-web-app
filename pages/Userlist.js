import Head from 'next/head'
import { 
  Heading, 
  Center, 
  Flex, 
  Button, 
  Stack, 
  HStack, 
  VStack, 
  Text, 
  Input, 
  Box, 
  Image, 
  Switch, 
  IconButton, 
  useColorModeValue,
  useBreakpointValue, 
  useToast,
  Container, 
  useDisclosure,
  AlertDialog,
  AlertDialogBody,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogContent,
  AlertDialogOverlay,
} from "@chakra-ui/react";
import { Avatar } from '@chakra-ui/react'
import React, { useEffect, useState, useContext } from "react";
import { TextareaAutosizeProps } from 'react-textarea-autosize';
import { Card, CardHeader, CardBody, CardFooter } from '@chakra-ui/react'
import { Textarea, Divider, Header } from '@chakra-ui/react';
import Router from "next/router";
import { db, storage} from "../firebase";
import { ref, uploadBytes, getDownloadURL, getStorage } from 'firebase/storage';
import { useAuth } from "../firebase";
import { AttachmentIcon, DeleteIcon } from '@chakra-ui/icons';
import { addDoc, collection, doc, getDocs, onSnapshot,serverTimestamp } from 'firebase/firestore';
import TopDrawer from '../constanst/components/Drawer';
import removeUser from '../constanst/services/users/remove_user';



export default function Dashboard() {
  const [Users, setUsers] = useState([]);
  const cancelRef = React.useRef();
  const toast = useToast();

  const {
    isOpen: isOpenAlertModal,
    onOpen: onOpenAlertModal,
    onClose: onCloseAlertModal,
  } = useDisclosure();



  useEffect (
    () => 
      onSnapshot(collection(db,"users"),(snapshot) =>
        {setUsers(snapshot.docs.map(doc => ({...doc.data(), id: doc.id})))
        }
      ),
    []
    );

    const processRemoveUser = async (props) => {
      const removeUserAccount = await removeUser(props);
  
      if (removeUserAccount.success) {
        toast({
          title: "User Removed Successfully",
          description: removeUserAccount.message,
          status: "success",
          duration: 5000,
          isClosable: true,
        });
        onCloseAlertModal();
      } else {
        toast({
          title: "User Operation Failed",
          description: removeUserAccount.message,
          status: "error",
          duration: 5000,
          isClosable: true,
        });
        onCloseAlertModal();
      }
    };

    return (
       <>

      <Head>
        <title>Profile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/aexelogo.png" />
      </Head>
          
      <Box as="section" pb={{ base: '12', md: '24' }}  bg="#ffffff" maxW="100vw" minH="100vh"> 
        <TopDrawer/>

        <Heading mt="2%" ml="15%" mr="5%" >Users</Heading>
        <VStack justifyContent="center">
          <Card 
              mt="2%"
              size="lg" 
              align='center'
              variant="outline"
              shadow="base"
              width="70vw"
              outlineColor="gray.900">

              <CardBody>
              {Users === undefined? (<> </>)
              : (Users.map((data, index) => {
                
                return (
                  <>
                <HStack width='container.xl' bg='#f2f2f2' height='8vh' justifyContent="space-between" padding="1vw" borderRadius="md" key={index}>
                  <HStack spacing={5}> 
                    <Avatar src={data?.profile_url} size="md" bg='teal.500'> </Avatar>
                    <Heading as='h5' size='sm'>
                      {data.first_name} {data.last_name}
                    </Heading>
                  </HStack>
                  <IconButton
                    onClick={() => {
                      onOpenAlertModal();
                    }} 
                   icon={<DeleteIcon w={8} h={8}></DeleteIcon>}></IconButton>

                  <AlertDialog
                  key={index}
                  isOpen={isOpenAlertModal}
                  leastDestructiveRef={cancelRef}
                  onClose={onCloseAlertModal}
                >
                  <AlertDialogOverlay>
                    <AlertDialogContent>
                      <AlertDialogHeader
                        fontSize="lg"
                        fontWeight="bold"
                      >
                        Delete Customer
                      </AlertDialogHeader>

                      <AlertDialogBody>
                        {
                          "Are you sure? You can't undo this action afterwards."
                        }
                      </AlertDialogBody>

                      <AlertDialogFooter>
                        <Button
                          ref={cancelRef}
                          onClick={onCloseAlertModal}
                        >
                          Cancel
                        </Button>
                        <Button
                          backgroundColor={"#F56565"}
                          _hover={{ backgroundColor: "#FC8181" }}
                          onClick={() => {
                            processRemoveUser(data.id);
                            // console.log(data.id)
                            onCloseAlertModal();
                          }}
                          ml={3}
                        >
                          Delete
                        </Button>
                      </AlertDialogFooter>
                    </AlertDialogContent>
                  </AlertDialogOverlay>
                </AlertDialog>
                </HStack>
                <Divider mt="1%" color="black"/>
                
                </>
                )
              }))  }
              </CardBody>
            </Card>  
          </VStack>   
        </Box>  
      </>
    )
}
