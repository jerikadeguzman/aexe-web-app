import Head from 'next/head'
import { 
  Heading, 
  Center, 
  Flex, 
  Button, 
  Stack, 
  HStack, 
  VStack, 
  Text, 
  Input, 
  Box, 
  Image, 
  Switch, 
  IconButton, 
  useColorModeValue,
  useBreakpointValue, 
  Container, 
  useDisclosure
} from "@chakra-ui/react";
import { Avatar, AvatarBadge, AvatarGroup, AiOutlineUser} from '@chakra-ui/react'
import React, { useEffect, useState, useContext } from "react";
import { FiMenu } from 'react-icons/fi'
import {
  Drawer,
  DrawerBody,
  DrawerFooter,
  DrawerHeader,
  DrawerOverlay,
  DrawerContent,
  DrawerCloseButton,
} from "@chakra-ui/react";
import NextLink from 'next/link'
import { TextareaAutosizeProps } from 'react-textarea-autosize';
import { Card, CardHeader, CardBody, CardFooter } from '@chakra-ui/react'
import { Textarea, Divider, Header } from '@chakra-ui/react';
import Router from "next/router";
import { db, storage} from "../firebase";
import { ref, uploadBytes, getDownloadURL, getStorage } from 'firebase/storage';
import { useAuth } from "../firebase";
import { AttachmentIcon, DeleteIcon } from '@chakra-ui/icons';
import { collection, addDoc, getDocs, doc } from 'firebase/firestore';



export default function Dashboard() {
  const currentUser = useAuth();
  const isDesktop = useBreakpointValue({ base: false, lg: true })
  const { isOpen, onOpen, onClose } = useDisclosure();
  const btnRef = React.useRef();
  /*useEffect(() => {
    setTimeout(() => {
      const checkSession = localStorage.getItem("email");
      const user_data = JSON.parse(checkSession);
      checkSession?
        getProfileData(user_data.profile_url)
       
     : Router.push("/");
      
    }, []);
  }, []);

  async function getProfileData() {
    const imageURL = ref(storage, `/files/${imageURL}`);
     await getDownloadURL(imageURL).then((url) => {
          setUrl(url);
          console.log(url)
        }).catch(error => {
          console.log(error.message, "error");
        })
  }

  const [image, setImage] = useState(null);
  const [url, setUrl] = useState(null);
  const handleImageChange =(e) =>{
    if(e.target.files[0]){
      setImage(e.target.files[0]);
    }
  };
  const handleSubmit = () => {
    const imageURL = ref(storage, `/files/${imageURL}`);
    image: should be unique name
    uploadBytes(imageURL, image).then(() =>{
      getDownloadURL(imageURL, image).then((url) => {
        setUrl(url);
        //console.log(File)
        //update doc ng user na naka login
      }).catch(error => {
        console.log(error.message, "error");
      });
      setImage(null);
    }).catch(error => {
      console.log(error.message);
    });

  }; 

 useEffect(() =>{
  if ( currentUser?.url){
    setUrl(currentUser.url);
    console.log("fetching");
  }
 }, [])

 const onSubmitHandler = (e) => {
  e.preventDefault();
 }

 const [posts, setPosts] = useState("")
 const postsCollectionRef = collection (db, "posts")

 const createPost = async () => {
  await addDoc(postsCollectionRef, {
    posts,
   author: { name: useAuth.currentUser.user_data , id: useAuth.currentUser.user_data  }
    });

 };
 
 const [postlist, setPostlist] = useState([]);

 useEffect(() => {
  const getPosts = async () => {
    const data = await getDocs(postsCollectionRef);
    setPostlist(data.docs.map((doc) => ({...doc.data(), id: doc.id})));
  };
  getPosts();
 });*/


    return (
       <>

      <Head>
        <title>Profile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/aexelogo.png" />
      </Head>
          
      <Box as="section" pb={{ base: '12', md: '24' }}  bg="#97392F"> 
            <Box as="nav" bg="bg-surface" boxShadow={useColorModeValue('sm', 'sm-dark')}>
              <Flex>
                <IconButton
                color="white"
                ref={btnRef}
                icon={<FiMenu fontSize="1.25rem"/>}
                onClick={onOpen}
                aria-label="Open Menu"
                bg="#97392F"
                />

                <IconButton
                icon={<Image src="/aexelogo.png"/>}
                w="5px"
                isRound={true}
                aria-label="Homepage"
                onClick={() => Router.push("/dashboard")}
                />
                  
                  <Avatar 
                  //src={url}
                  bg='teal.500'  
                  size="sm" align="center" 
                  marginLeft="83%"
                  marginTop="1"></Avatar>

                <Drawer
                isOpen={isOpen}
                placement="left"
                colorScheme={"blue"}
                onClose={onClose}
                finalFocusRef={btnRef}>

                <DrawerOverlay/>
                <DrawerContent>
                  <DrawerCloseButton />

                  <DrawerHeader bgColor='#97392F'>
                    <HStack>
                      <Heading 
                      as='h4' 
                      size='md' 
                      color='whiteAlpha.900'>Welcome Admin</Heading>
                    </HStack>
                  </DrawerHeader>

                  <DrawerBody bgColor='#ffffff '>
                    <Flex flexDir="column" align="center">
                      <NextLink href="/Profile" passHref>
                        <Button as="a" 
                        variant="ghost" 
                        aria-label="Profile" 
                        my={5} w="100%" 
                        textColor='#696969' 
                        color="blue">Profile</Button>
                      </NextLink>
                  </Flex>

                    <Flex flexDir="column" align="center">
                      <NextLink href="/Messages" passHref>
                        <Button as="a" 
                        variant="ghost" 
                        aria-label="Messages" 
                        my={5} w="100%" 
                        textColor='#696969' 
                        color="blue">Messages</Button>
                      </NextLink>
                  </Flex>

                  <Flex flexDir="column" align="center">
                      <NextLink href="/ARInstructor" passHref>
                        <Button as="a" 
                        variant="ghost" 
                        aria-label="AR Instructor" 
                        my={5} w="100%" 
                        textColor='#696969'>AR Instructor</Button>
                      </NextLink>
                  </Flex>

                  <Flex flexDir="column" align="center">
                      <NextLink href="/Announcement" passHref>
                        <Button as="a" 
                        variant="ghost" 
                        aria-label="Announcements" 
                        my={5} w="100%" 
                        textColor='#696969'>Announcement</Button>
                      </NextLink>
                  </Flex>

                  <Flex flexDir="column" align="center">
                      <NextLink href="/Userlist" passHref>
                        <Button as="a" 
                        variant="ghost" 
                        aria-label="Userlist" 
                        my={5} w="100%" 
                        textColor='#696969'>User List</Button>
                      </NextLink>
                  </Flex>

                  <Flex flexDir="column" align="center">
                      <NextLink href="/UserInquiries" passHref>
                        <Button as="a" 
                        variant="ghost" 
                        aria-label="UserInquiries" 
                        my={5} w="100%" 
                        textColor='#696969'>User Inquiries</Button>
                      </NextLink>
                  </Flex>
                  
                  <Flex flexDir="column" align="center">
                      <NextLink href="/Settings" passHref>
                        <Button as="a" 
                        variant="ghost" 
                        aria-label="Settings" 
                        my={5} w="100%" 
                        textColor='#696969'>Settings</Button>
                      </NextLink>
                  </Flex>

                  </DrawerBody>

                  <DrawerFooter bgColor='#ffffff'>
                    <Button colorScheme='red'
                    onClick={() => {Router.push("/")
                    localStorage.clear();
                  }}>Logout</Button>
                  </DrawerFooter>

                </DrawerContent>
              </Drawer>

              </Flex>
         
            </Box>


            <Center>
              <Box bg="#ffffff" w="1550%"  h="100vh" >

                <Heading
                mt="2%" ml="15%" mr="5%" >Users</Heading>

            <Center>
            <Card 
                mt="3%" ml="5%" mr="5%"  
                size="lg" 
                align='center'
                variant="outline"
                shadow="base"
                width="70vw"
                outlineColor="gray.900">

                <CardBody>
                 <HStack >
                 <Avatar 
                    size="md" 
                    mt="10%"
                    bg='teal.500'>
                    </Avatar>
                  <Heading as='h5' size='sm'>
                    Name of User
                  </Heading>
                  <IconButton icon={<DeleteIcon></DeleteIcon>}></IconButton>
                 </HStack>

                 <Divider mt="3%" color="black"/>

                 <HStack >
                 <Avatar 
                    size="md" 
                    mt="10%"
                    bg='teal.500'>
                    </Avatar>
                  <Heading as='h5' size='sm'>
                    Name of User
                  </Heading>
                  <IconButton icon={<DeleteIcon></DeleteIcon>}></IconButton>
                 </HStack>

                 <Divider mt="3%" color="black"/>

                 <HStack >
                 <Avatar 
                    size="md" 
                    mt="10%"
                    bg='teal.500'>
                    </Avatar>
                  <Heading as='h5' size='sm'>
                    Name of User
                  </Heading>
                  <IconButton icon={<DeleteIcon></DeleteIcon>}></IconButton>
                 </HStack>

                 <Divider mt="3%" color="black"/>
                
                 
                </CardBody>

               

              </Card>
            </Center>
                

            
                  

                  
              </Box>
            </Center>

          </Box>


          
        </>
      )
}
