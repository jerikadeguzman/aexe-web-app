import Head from 'next/head'
import {
  Heading,
  Center,
  Flex,
  Button,
  Stack,
  HStack,
  VStack,
  Text,
  Input,
  Box,
  Image,
  Switch,
  Select,
  useColorModeValue,
  InputGroup,
  InputLeftAddon,
  useBreakpointValue,
  Container,
  useDisclosure,
  FormControl,
  ChakraProvider,
  FormLabel,
  WrapItem,
  Avatar,
  ButtonGroup,
  InputRightElement,
  useToast
} from "@chakra-ui/react";
import { AvatarBadge, AvatarGroup, AiOutlineUser } from "@chakra-ui/avatar"
import React, { useEffect, useState, useContext } from "react";
//import Router from 'react'
import { FiMenu } from 'react-icons/fi'
import { IconButton } from '@chakra-ui/react'
import {
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalCloseButton,
  ModalFooter,
  cancelRef
} from "@chakra-ui/react";
import Router, { useRouter } from "next/router";
import { storage } from "../firebase";
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { useAuth, upload } from "../firebase";
import TopDrawer from '../constanst/components/drawer';
import {
  doc,
  updateDoc,
} from "firebase/firestore";
import { db } from '../firebase';
import UserDataContext from '../context/UserDataContext';
import { updateData, uploadFileGetLink } from '../constanst/services/generic';

export default function Settings() {
  const userDataContext = useContext(UserDataContext);
  const [user, setUser] = useState();
  const [hidePassword, setHidePassword] = useState(true);
  const [imageData, setImageData] = useState("");
  const router = useRouter();
  const toast = useToast();
  const [updateUser, setUpdateUser] = useState({
    first_name: "",
    first_name: "",
    address: "",
    mobile_number: "",
    gender: "",
    birthday: "",
    email: "",
    password: "",
    profile_url: "",
  })
  useEffect(() => {
    setTimeout(() => {
      userDataContext?.data ?
        setUser(userDataContext?.data)
        :
        // Router.push("/");
        console.log(userDataContext?.data)

    }, []);

    console.log(user?.id)
  }, []);

  // Handle food file upload sets here
  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    const reader = new FileReader();

    reader.onload = () => {
      const base64Data = reader.result;
      setImageData(base64Data);
    };

    reader.readAsDataURL(file);
  };

  async function updateProfile() {
    var profile = updateUser


    if (
      profile?.first_name != ""
      || profile?.last_name != ""
      || profile?.birthday != ""
      || profile?.gender != ""
      || profile?.email != ""
      || profile?.password != "") {
      if (imageData != "") {
        let urlPath = await uploadFileGetLink(imageData, user?.id);
        profile.profile_url = urlPath
      }
      const update = await updateData({ path: "users", id: user?.id, data: profile })
      toast({
        title: "Data Update",
        description: update?.message,
        status: "success",
        duration: 2500,
        isClosable: true,
        position: "bottom-right",
      });
      router.reload(window.location.pathname);
    }
  }

  return (
    <>
      <Head>
        <title>Settings</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/aexelogo.png" />
      </Head>
      <TopDrawer />

      <Box bgColor="#D9D9D9" w="100%" h="120vh">
        <HStack justifyContent={'space-between'} w={'100%'} paddingInline={'8vw'} spacing={'5vw'}>
          <VStack alignItems={"left"} spacing="5" padding={"1"}>

            <Heading marginTop="3%" color="#97392F"> Account Information</Heading>
            <HStack alignItems={"stretch"} alignSelf={"flex-start"} spacing="20">
              <Box>
                <FormLabel variant="floating">First Name</FormLabel>
                <Input placeholder="First Name" bg="white" color={"black"} w="26.5vw" minW={'180px'} onChange={(e) => {
                  setUpdateUser({ ...updateUser, first_name: e.target.value });
                }} />
              </Box>
              <Box>
                <FormLabel variant="floating">Last Name</FormLabel>
                <Input placeholder="Last Name" bg="white" color={"black"} w="26.5vw" minW={'180px'} onChange={(e) => {
                  setUpdateUser({ ...updateUser, last_name: e.target.value });
                }} />
              </Box>
            </HStack>

            <HStack alignItems={"stretch"} alignSelf={"flex-start"} spacing="20">
              <Box>
                <FormLabel variant="floating">Address</FormLabel>
                <Input placeholder="Address" bg="white" color={"black"} w="26.5vw" minW={'180px'} onChange={(e) => {
                  setUpdateUser({ ...updateUser, address: e.target.value });
                }} />
              </Box>
              <Box>
                <FormLabel variant="floating">Mobile Number</FormLabel>
                <Input placeholder="Mobile Number" bg="white" color={"black"} w="26.5vw" minW={'180px'} onChange={(e) => {
                  setUpdateUser({ ...updateUser, mobile_number: e.target.value });
                }} />
              </Box>
            </HStack>

            <HStack alignItems={"stretch"} alignSelf={"flex-start"} spacing="20">
              <Box>
                <FormLabel variant="floating">Gender</FormLabel>
                <Select
                  bg="white"
                  color="black"
                  w='26.5vw'
                  minW={'180px'}
                  placeholder='Gender'
                  onChange={(e) => {
                    setUpdateUser({ ...updateUser, gender: e.target.value });
                  }}>
                  <option>Male</option>
                  <option>Female</option>
                </Select>
              </Box>
              <Box>
                <FormLabel variant="floating">Date of Birth</FormLabel>
                <Input placeholder="Birthday" bg="white" type="date" color={"black"} w="26.5vw" minW={'180px'} onChange={(e) => {
                  setUpdateUser({ ...updateUser, birthday: e.target.value });
                }} />
              </Box>

            </HStack>


            <HStack alignItems={"stretch"} alignSelf={"flex-start"} spacing="20">
              <Box>
                <FormLabel variant="floating">Email</FormLabel>
                <Input placeholder="Email" bg="white" color={"black"} w="26.5vw" minW={'180px'} onChange={(e) => {
                  setUpdateUser({ ...updateUser, email: e.target.value });
                }} />
              </Box>
              <Box>

              </Box>
            </HStack>
            <Heading marginLeft="6%" marginTop="3%" color="#97392F"> Change Password</Heading>
            <HStack alignItems={"stretch"} alignSelf={"flex-start"} spacing="20">
              <Box>
                <FormLabel variant="floating">New Password</FormLabel>
                <InputGroup>
                  <Input placeholder="New Password" bg="white" color={"black"} w="26.5vw" minW={'180px'} type={hidePassword ? "password" : "text"} onChange={(e) => {
                    setUpdateUser({ ...updateUser, password: e.target.value });
                  }} />
                  <InputRightElement children={<Switch
                    me='5'
                    colorScheme={"cyan"}
                    size={"lg"}
                    onChange={() => setHidePassword(!hidePassword)}
                  />} />
                </InputGroup>
              </Box>
            </HStack>

            <HStack color='white' alignItems={"stretch"} alignSelf={"flex-start"} spacing="8">
              <Button
                w="8vw"
                bgColor="#F04141"
                minW={'180px'}
                type="submit"
                onClick={updateProfile}
              >Save all Changes</Button>
            </HStack>
          </VStack>

          <VStack h={'80vh'} padding={'10vh'} spacing={'3vh'}>
            <Avatar
              marginTop="5%"
              sx={{ width: 150, height: 150 }}
              bg='teal.500'></Avatar>
            <Input type="file" accept="image/*" onChange={handleFileUpload} w='12vw'
              variant='filled'></Input>
            <Button
              textColor="white"
              bgColor="#696969"
              align="center"
              size='md'>Submit</Button>
          </VStack>
        </HStack>


      </Box>
    </>
  )
}