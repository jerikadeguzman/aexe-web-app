import Head from 'next/head'
import { 
  Heading, 
  Center, 
  Flex, 
  Button, 
  Stack, 
  HStack, 
  VStack, 
  Text, 
  Input, 
  Box, 
  Image, 
  Switch, 
  IconButton, 
  useColorModeValue,
  useBreakpointValue, 
  Container, 
  useDisclosure
} from "@chakra-ui/react";
import { Avatar, AvatarBadge, AvatarGroup, AiOutlineUser} from '@chakra-ui/react'
import React, { useEffect, useState, useContext } from "react";
//import Router from 'react'
import { FiMenu } from 'react-icons/fi'
import {
  Drawer,
  DrawerBody,
  DrawerFooter,
  DrawerHeader,
  DrawerOverlay,
  DrawerContent,
  DrawerCloseButton,
} from "@chakra-ui/react";
import NextLink from 'next/link'
import { Textarea } from '@chakra-ui/react'
import { Card, CardHeader, CardBody, CardFooter } from '@chakra-ui/react'
import { TextareaAutosizeProps } from 'react-textarea-autosize';
import Router from "next/router";
import { storage } from "../firebase";
import { ref, uploadBytes, getDownloadURL, getStorage } from 'firebase/storage';
import { useAuth,auth,db,announce } from "../firebase";
import { addDoc, collection, doc, getDocs, onSnapshot,serverTimestamp } from 'firebase/firestore';
import { async } from '@firebase/util';


export default function Dashboard() {
  const currentUser = useAuth();
  const isDesktop = useBreakpointValue({ base: false, lg: true })
  const { isOpen, onOpen, onClose } = useDisclosure();
  const btnRef = React.useRef();
  useEffect(() => {
    setTimeout(() => {
      const checkSession = localStorage.getItem("email");
      const user_data = JSON.parse(checkSession);
      checkSession?
        getProfileData(user_data.profile_url)
       
     : Router.push("/");
      
    }, []);
  }, []);

  async function getProfileData() {
    const imageURL = ref(storage, `/files/${imageURL}`);
     await getDownloadURL(imageURL).then((url) => {
          setUrl(url);
          console.log(url)
        }).catch(error => {
          console.log(error.message, "error");
        })
  }

  const [image, setImage] = useState(null);
  const [url, setUrl] = useState(null);
  const handleImageChange =(e) =>{
    if(e.target.files[0]){
      setImage(e.target.files[0]);
    }
  };
  const handleSubmit = () => {
    const imageURL = ref(storage, `/files/${imageURL}`);
    //image: should be unique name
    uploadBytes(imageURL, image).then(() =>{
      getDownloadURL(imageURL, image).then((url) => {
        setUrl(url);
        //console.log(File)
        //update doc ng user na naka login
      }).catch(error => {
        console.log(error.message, "error");
      });
      setImage(null);
    }).catch(error => {
      console.log(error.message);
    });

  }; 

 useEffect(() =>{
  if ( currentUser?.url){
    setUrl(currentUser.url);
    console.log("fetching");
  }

 }, [])

 const [ Posts, setPost] = useState([]);

 useEffect (
  () => 
    onSnapshot(collection(db,"announce"),(snapshot) =>
      setPost(snapshot.docs.map(doc => ({...doc.data(), id: doc.id})))
    ),
  []
  );
  const createPost = async () => {
    const collectionRef = collection(db,"announce");
    const setPost = {Posts, timestamp: serverTimestamp()};
    const docRef = await addDoc(collectionRef,setPost);
    console.log(docRef.id);

  };
  console.log(Posts);


    return (
        <>
      <Head>
        <title>Announcement</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/aexelogo.png" />
      </Head>
          
          <Box as="section" pb={{ base: '12', md: '24' }}  bg="#97392F"> 
            <Box as="nav" bg="bg-surface" boxShadow={useColorModeValue('sm', 'sm-dark')}>
              <Flex>
                <IconButton
                color="white"
                ref={btnRef}
                icon={<FiMenu fontSize="1.25rem"/>}
                onClick={onOpen}
                aria-label="Open Menu"
                bg="#97392F"
                />
                <IconButton
                icon={<Image src="/aexelogo.png"/>}
                w="5px"
                isRound={true}
                aria-label="Homepage"
                onClick={() => Router.push("/dashboard")}
                />
              
              <Avatar 
                  src={url}
                  bg='teal.500'  
                  size="sm" align="center" 
                  marginLeft="83%"  
                  marginTop="1"></Avatar>

              <Drawer
                isOpen={isOpen}
                placement="left"
                colorScheme={"blue"}
                onClose={onClose}
                finalFocusRef={btnRef}>

                <DrawerOverlay/>
                <DrawerContent>
                  <DrawerCloseButton />

                  <DrawerHeader bgColor='#97392F'>
                    <HStack>
                      <Heading 
                      as='h4' 
                      size='md' 
                      color='whiteAlpha.900'>Welcome Admin</Heading>
                    </HStack>
                  </DrawerHeader>

                  <DrawerBody bgColor='#ffffff '>
                    <Flex flexDir="column" align="center">
                      <NextLink href="/Profile" passHref>
                        <Button as="a" 
                        variant="ghost" 
                        aria-label="Profile" 
                        my={5} w="100%" 
                        textColor='#696969' 
                        color="blue">Profile
                        </Button>
                      </NextLink>
                    </Flex>

                    <Flex flexDir="column" align="center">
                      <NextLink href="/Messages" passHref>
                        <Button as="a" 
                        variant="ghost" 
                        aria-label="Home" 
                        my={5} w="100%" 
                        textColor='#696969' 
                        color="blue">Messages</Button>
                      </NextLink>
                  </Flex>

                  <Flex flexDir="column" align="center">
                      <NextLink href="/ARInstructor" passHref>
                        <Button as="a" 
                        variant="ghost" 
                        aria-label="Home" 
                        my={5} w="100%" 
                        textColor='#696969'>AR Instructor</Button>
                      </NextLink>
                  </Flex>

                  <Flex flexDir="column" align="center">
                      <NextLink href="/Announcement" passHref>
                        <Button as="a" 
                        variant="ghost" 
                        aria-label="Home" 
                        my={5} w="100%" 
                        textColor='#696969'>Announcement</Button>
                      </NextLink>
                  </Flex>

                  <Flex flexDir="column" align="center">
                      <NextLink href="/UserInquiries" passHref>
                        <Button as="a" 
                        variant="ghost" 
                        aria-label="UserInquiries" 
                        my={5} w="100%" 
                        textColor='#696969'>User Inquiries</Button>
                      </NextLink>
                  </Flex>

                  <Flex flexDir="column" align="center">
                      <NextLink href="/Settings" passHref>
                        <Button as="a" 
                        variant="ghost" 
                        aria-label="Home" 
                        my={5} w="100%" 
                        textColor='#696969'>Settings</Button>
                      </NextLink>
                  </Flex>
                  </DrawerBody>

                  <DrawerFooter bgColor='#ffffff'>
                    <Button colorScheme='red'
                    onClick={() => {Router.push("/")
                    localStorage.clear();
                  }}>Logout</Button>
                  </DrawerFooter>

                </DrawerContent>
              </Drawer>

              </Flex>
            </Box>

            <Center>
              <Box bgColor="#ffffff" w="1550px" h="800px" >
                  <Center>
                    <VStack>
                      <Card
                        width="35vw"
                        direction={{ base: 'column', sm: 'row' }}
                        overflow='hidden'
                        variant="outline"
                        shadow="base"
                        outlineColor="gray.900"
                        mt="10%"
                      >

                      <Stack>
                        <CardBody>
                          <Heading size='md'>Announcements</Heading>
                          <Center>
                            <Textarea 
                            onChange={(event) => {setPosts(event.target.value)}}
                            input type="text"
                            width="31vw"
                            as={TextareaAutosizeProps} mt="4"
                            minRows={3} resize="none"
                            placeholder="Create post..."/>
                          </Center>
                        </CardBody>

                        <CardFooter>
                          <VStack>
                          <Button 
                          bgColor="#696969 "
                          onClick={createPost}
                          className='button'
                          //type="submit"
                          variant='solid' 
                          color="white"
                          >Post</Button>
                          </VStack>
                        </CardFooter>
                      </Stack>
                    </Card>
                    </VStack>

                    {/* <Container> 
                    {Posts.map (p => (
                    <span key={p.id}> {p.Posts}, {p.timestamp} </span>))}
                    </Container>*/}
                     


                  </Center>

                
                 
                  
              </Box>
            </Center>


          </Box>

        </>
      )
}

const styleProps = {
    indexWrapper: {
      height: "100vh",
      flexDirection: "column",
      alignItems: "center",
      justifyContent: "center",
      bgColor: "#22202A",
    },
    formWrapper: {
      borderRadius: "xl",
      width: "54vh",
      height: "50vh",
      flexDirection: "column",
      alignItems: "center",
      padding: "2vh",
      color: "white",
      bgColor: "#E1CBA5",
      
      
    }
  }